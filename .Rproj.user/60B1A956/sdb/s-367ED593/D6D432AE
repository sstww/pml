{
    "contents" : "library(AppliedPredictiveModeling)\nlibrary(caret)\ndata(AlzheimerDisease)\n\nadData = data.frame(diagnosis,predictors)\ntestIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)\ntraining = adData[-testIndex,]\ntesting = adData[testIndex,]\n\n\nlibrary(AppliedPredictiveModeling)\ndata(concrete)\nlibrary(caret)\nset.seed(1000)\ninTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]\ntraining = mixtures[ inTrain,]\ntesting = mixtures[-inTrain,]\nqplot(mixtures$Superplasticize, geom=\"histogram\")\nqplot(log(mixtures$Superplasticize+1), geom=\"histogram\")\n\n\nlibrary(caret)\nlibrary(AppliedPredictiveModeling)\nset.seed(3433)\ndata(AlzheimerDisease)\nadData = data.frame(diagnosis,predictors)\ninTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]\ntraining = adData[ inTrain,]\ntesting = adData[-inTrain,]\n\nset.seed(3433)\nIL <- grep(\"^IL\", colnames(training), value=TRUE)\nILpredictors <- predictors[, IL]\ndf <- data.frame(diagnosis, ILpredictors)\ninTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]\ntraining <- df[inTrain, ]\ntesting <- df[-inTrain, ]\nmodelFit <- train(diagnosis ~ ., method=\"glm\", data=training)\npredictions <- predict(modelFit, newdata=testing)\nC1 <- confusionMatrix(predictions, testing$diagnosis)\nprint(C1)\nacc1 <- C1$overall[1]\nacc1 # Non-PCA Accuracy: 0.65 \n\nmodelFit <- train(training$diagnosis ~ ., \n                  method=\"glm\", \n                  preProcess=\"pca\", \n                  data=training, \n                  trControl=trainControl(preProcOptions=list(thresh=0.8)))\nC2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))\nprint(C2)\nacc2 <- C2$overall[1]\nacc2 # PCA Accuracy: 0.72\n\n\n\ntr<-training[, grep(\"^IL\", colnames(training))]\npreP<-preProcess(tr, method=\"pca\", thresh=.80)\npreP$rotation\n\nlibrary(caret)\nlibrary(AppliedPredictiveModeling)\nset.seed(3433)\ndata(AlzheimerDisease)\nadData = data.frame(diagnosis,predictors)\ninTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]\ntraining = adData[ inTrain,]\ntesting = adData[-inTrain,]\n\n\nlibrary(caret); library(kernlab); data(spam)\ninTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE)\n\ntraining<-spam[inTrain,]\ntesting<-spam[-inTrain,]\nmodelFit<-train(type~., data=training, method=\"glm\")\n\ninTrain<-createDataPartition(y=Wage$wage, p=0.7, list=FALSE)\ntraining<-Wage[inTrain,]\ntesting<-Wage[-inTrain,]\ndim(training); dim(testing)\n\nfeaturePlot(x=training[, c(\"age\", \"education\", \"jobclass\")], \n            y=training$wage, \n            plot=\"pairs\")\n\nlibrary(Hmisc)\ncutWage<-cut2(training$wage, g=3)\ntable(cutWage)\n\nlibrary(AppliedPredictiveModeling)\ndata(segmentationOriginal)\nlibrary(caret)\n\nset.seed(125)\ntraining<-segmentationOriginal[segmentationOriginal$Case==\"Train\",]\ntesting<-segmentationOriginal[segmentationOriginal$Case==\"Test\",]\ndim(training); dim(testing)\nlibrary(rpart)\nlibrary(rattle)\nlibrary(rpart.plot)\nmodelFit<-train(Case~., data=training, method=\"rpart\")\nfancyRpartPlot(modelFit$finalModel)\nmodelFit$finalModel\npredict(modelFit, newdata=training)\n\nlibrary(pgmm)\ndata(olive)\nolive = olive[,-1]\nolive$Area<-factor(olive$Area)\ninTrain<-createDataPartition(y=olive$Area, p=0.7, list=FALSE)\ntraining<-olive[inTrain,]\ntesting<-olive[-inTrain,]\ndim(training); dim(testing)\n\nset.seed(125)\nmodelFit<-train(Area~., data=training, method=\"rpart\")\nfancyRpartPlot(modelFit$finalModel)\nmodelFit$finalModel\n\npredict(modelFit, newdata= as.data.frame(t(colMeans(olive[,-1]))))\n\nlibrary(ElemStatLearn)\ndata(SAheart)\nset.seed(8484)\ntrain = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)\ntrainSA = SAheart[train,]\ntestSA = SAheart[-train,]\n\nset.seed(13234)\nmodelFit<-train(chd~age + alcohol + obesity + tobacco + typea + ldl, \n                data=trainSA, \n                method=\"glm\", \n                family='binomial')\n\n\nmissClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}\npreTrain<-predict(modelFit, trainSA)\npreTest<-predict(modelFit, testSA)\nmissClass(trainSA$chd, preTrain)\nmissClass(testSA$chd, preTest)\n\nlibrary(ElemStatLearn)\ndata(vowel.train)\ndata(vowel.test) \nvowel.train$y<-factor(vowel.train$y)\nvowel.test$y<-factor(vowel.test$y)\n\nset.seed(33833)\nmodFit <- train(y~ .,data=vowel.train,method=\"rf\",imprtance=FALSE)\nvarImp(modFit)\n",
    "created" : 1436727170962.000,
    "dirty" : true,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3993909033",
    "id" : "D6D432AE",
    "lastKnownWriteTime" : 1436749602,
    "path" : "~/R/Coursera/pml/Quizes.R",
    "project_path" : "Quizes.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}